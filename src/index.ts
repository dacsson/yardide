import { app, BrowserWindow, ipcMain, webContents, dialog } from 'electron';
import path from "path";
import spawn from 'child_process'
import fs from "fs";
import { FileDesc } from './@types/types';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const win = new BrowserWindow({
    height: 800,
    width: 1026,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      nodeIntegrationInWorker: true,
      webSecurity: false
    },
    frame: false,
    transparent: true
  });

  // and load the index.html of the app.
  win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  win.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  ipcMain.on("readDir", (event, args) => {
    // console.log("readDir: ", args);
    fs.readdir(args, (error, files) => {
      BrowserWindow.getFocusedWindow().webContents.send("dirFiles", files);
      console.log(" app tsx read dir: ", files)
    });
  });
  ipcMain.on("readFile", (event, args) => {
    // console.log("reading: ", args[0], args[1])
    // save file
    fs.writeFile(args[0], args[1], () => {});
    console.log("args ", args[0], args[1]);
    var cp = require("child_process");
    // /home/thephoneoff/MyProjects/yard/build

    var localdir = path.join(__dirname, '..', '..', '../yard/build/main');
    console.log("path ", localdir)
    const yard_comp = cp.spawn(localdir, [args[0], 'pdf']);
    // yard_comp.stdout.on('data', (data) => {
    //   // BrowserWindow.getFocusedWindow().webContents.send("compOut", data);
    //   // var error_browser = BrowserWindow.getFocusedWindow().getD document.getElementById('error_container');
    //   // error_browser.innerText = "";
    //   error_browser.innerText = data;
    //   console.log('spawned', data);
    // })
    yard_comp.stderr.on('data', (data) => {
      BrowserWindow.getFocusedWindow().webContents.send("fileText", data);
      console.error(`stderr: ${data}`);
    });
    
    yard_comp.on('close', (code) => {
      if(code == 0)
      {
        var localdir = path.join(__dirname, '..', '..', '../yard/test/new.pdf');
        console.log(" LOCAL PDF DIR ", localdir);
        BrowserWindow.getFocusedWindow().webContents.send("fileText", localdir);
        // fs.readFile(localdir, (error, data) => {
        //   // Do something with file contents
        //   // console.log("in main read file:", data.toString())
        //   // Send result back to renderer process
          
        // });
      }
      // console.log(`child process exited with code ${code}`);
    }); 
  })
  ipcMain.on("readPickedFile", (event, args) => {
    console.log("in main read file:", args)
    fs.readFile(args, (error, data) => {
      // console.log("reading ", args, data)
      var file : FileDesc = { content: data, path: args[0]}
      // Do something with file contents
      // Send result back to renderer process
      BrowserWindow.getFocusedWindow().webContents.send("yardText",  file)
    });
  })
  ipcMain.on("readYardFile", (event, args) => {
    // console.log("requested yard file");
    dialog.showOpenDialog({ 
      properties: ['openFile'],
      filters: [
        { name: 'ЯРД файл / Шаблон ЯРД', extensions: ['yard', 'shyard'] }
      ]
    })
    .then(
      path => {
        fs.readFile(path.filePaths[0], (error, data) => {
          var file : FileDesc = { content: data, path: path.filePaths[0]}
          // Do something with file contents
          // console.log("in main read file:", data.toString())
          // Send result back to renderer process
          BrowserWindow.getFocusedWindow().webContents.send("yardText",  file)
        });
      }
    )
  })
  ipcMain.on("saveNewFile", (event, args) => {
    // console.log("save new file: ", args)
    dialog.showSaveDialog({

    })
    .then(
      path => {
        fs.writeFile(path.filePath, args[0], () => {});
        BrowserWindow.getFocusedWindow().webContents.send("newFilePath",  path.filePath);
      }
    )
  })
  ipcMain.on("exportPdf", (event, args) => {
    // console.log("save new file: ", args)
    dialog.showSaveDialog({

    })
    .then(
      path => {
        fs.writeFile(path.filePath, args, () => {});
      }
    )
  })
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
